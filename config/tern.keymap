#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Layers */

#define DEF 0
#define NAV 1
#define SYM 2
#define NUM 3

/* Shortcuts */

#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define ALL LC(A)
#define TOP LC(HOME)
#define BTM LC(END)

/* Behavior Settings */

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
};

&sk {
    release-after-ms = <250>;
    quick-release;
};

&sl { release-after-ms = <250>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */
        /* Letters */

        v {
            key-positions = <1 2>;
            bindings = <&kp V>;
            layers = <0>;
        };

        q {
            key-positions = <2 3>;
            bindings = <&kp Q>;
            layers = <0>;
        };

        z {
            key-positions = <20 21>;
            bindings = <&kp Z>;
            layers = <0>;
        };

        /* Brackets */

        lbrc {
            key-positions = <1 11>;
            bindings = <&kp LEFT_BRACE>;
            layers = <0>;
        };

        rbrc {
            key-positions = <8 18>;
            bindings = <&kp RIGHT_BRACE>;
            layers = <0>;
        };

        lbkt {
            key-positions = <2 12>;
            bindings = <&kp LEFT_BRACKET>;
            layers = <0>;
        };

        rbkt {
            key-positions = <7 17>;
            bindings = <&kp RIGHT_BRACKET>;
            layers = <0>;
        };

        lpar {
            key-positions = <3 13>;
            bindings = <&kp LEFT_PARENTHESIS>;
            layers = <0>;
        };

        rpar {
            key-positions = <6 16>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            layers = <0>;
        };

        /* Convenience */

        del {
            key-positions = <5 6>;
            bindings = <&kp DEL>;
            layers = <0>;
        };

        esc {
            key-positions = <5 15>;
            bindings = <&kp ESC>;
            layers = <0>;
        };

        ins {
            bindings = <&kp INS>;
            key-positions = <6 7>;
            layers = <0>;
        };

        bpsc {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
            layers = <0>;
        };

        pscn {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <19 25>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp W           &kp C           &kp L        &kp D             &kp P        &kp K      &kp U             &kp O        &kp Y           &kp SINGLE_QUOTE
&mt LEFT_GUI R  &mt LEFT_ALT S  &mt LCTRL N  &mt LEFT_SHIFT T  &kp B        &kp J      &mt LEFT_SHIFT A  &mt LCTRL E  &mt LEFT_ALT I  &mt LEFT_GUI H
                &kp F           &kp M        &kp G                                     &kp X             &kp COMMA    &kp DOT
                                             &sl 1             &kp SPACE    &kp ENTER  &sl 2
            >;
        };

        sym_layer {
            bindings = <
&kp LESS_THAN  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp BACKSLASH    &kp UNDER  &kp CARET    &kp SQT        &kp DOUBLE_QUOTES  &kp GREATER_THAN
&kp HASH       &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS   &kp SLASH        &kp MINUS  &kp ASTRK    &kp PERCENT    &kp SEMICOLON      &kp PIPE
               &kp DOLLAR       &kp QUESTION       &kp EXCLAMATION                                    &kp AT_SIGN  &kp AMPERSAND  &kp COLON
                                                   &trans                 &trans           &trans     &trans
            >;

            label = "SYM";
        };

        num_layer {
            bindings = <
&kp PLUS  &kp N7  &kp N8  &kp N9  &kp EQUAL    &kp F1  &kp F2   &kp F3   &kp F4   &kp F5
&kp N0    &kp N4  &kp N5  &kp N6  &kp TILDE    &kp F9  &kp F6   &kp F7   &kp F8   &trans
          &kp N1  &kp N2  &kp N3                       &kp F10  &kp F11  &kp F12
                          &trans  &trans       &trans  &trans
            >;

            label = "NUM";
        };

        func_layer {
            bindings = <
&none  &kp HOME  &kp UP    &kp END    &none     &none   &none   &none  &none  &bt BT_CLR_ALL
&none  &kp LEFT  &kp DOWN  &kp RIGHT  &none     &none   &none   &none  &none  &soft_off
       &none     &none     &none                        &none   &none  &none
                           &trans     &trans    &trans  &trans
            >;

            label = "FUNC";
        };
    };
};
